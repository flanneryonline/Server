#!/usr/bin/env bash

#main entry point for install
clean_install(){
    echo "starting zfs boot setup"
    zfs_boot_setup
    errorcheck && echoerr "error setting up boot disks." && return 1

    echo "starting debootstrap"
    debootstrap $SERVER_DIST_RELEASE "$root" $SERVER_DIST_URL
    errorcheck && echoerr "error in debootstrap" && return 1

    echo "bind mounting install location"
    mount --rbind /dev "$root/dev"
    errorcheck && return 1
    mount --rbind /dev/pts "$root/dev/pts"
    errorcheck && return 1
    mount --rbind /proc "$root/proc"
    errorcheck && return 1
    mount --rbind /sys  "$root/sys"
    errorcheck && return 1

    echo "saving system settings to install location"
    #save disk links so it survives reboot in new os
    local fast_disk_temp=$fast_disks
    fast_disks=
    for disk in $fast_disk_temp
    do
        fast_disks="$fast_disks $(get_disk_link $disk)"
    done
    local slow_disk_temp=$slow_disks
    slow_disks=
    for disk in $slow_disk_temp
    do
        slow_disks="$slow_disks $(get_disk_link $disk)"
    done
    set_server_setting "password" "$admin_password"
    set_server_setting "backup-sync-enabled" "$SYNC_DATA"
    set_server_setting "backup-enabled" "$BACKUP_ENABLED"
    set_server_setting "fast-storage-enabled" "$FAST_STORAGE_ENABLED"
    set_server_setting "slow-storage-enabled" "$SLOW_STORAGE_ENABLED"
    set_server_setting "services-enabled" "$SERVICES_ENABLED"
    set_server_setting "fast-disks" "$fast_disks"
    set_server_setting "slow-disks" "$slow_disks"
    set_server_setting "link-backup" "$LINK_BACKUP"

    server_install
    errorcheck && echoerr "error in server_install" && return 1

    echo "unmounting bind in install location"
    umount -l "$root/dev/pts"
    errorcheck && return 1
    umount -l "$root/dev"
    errorcheck && return 1
    umount -l "$root/proc"
    errorcheck && return 1
    umount -l "$root/sys"
    errorcheck && return 1

    echo "removing $ROOT_POOL to prep for first boot"
    umount -lAR "$root"
    errorcheck && echoerr "error unmounting root pool" && return 1
    zpool export $ROOT_POOL
    errorcheck && echoerr "error exporting root pool" && return 1

    return 0
}

server_install() {
    #server code
    get_server_code

    #locale
    eval "$chroot_eval locale-gen --purge en_US.UTF-8"
    errorcheck && return 1
    eval "$chroot_eval update-locale LANG=en_US.UTF-8"
    errorcheck && return 1

    #timezone
    echo "linking timezone info to /etc/localtime"
    [ -f "$root/etc/localtime" ] && rm "$root/etc/localtime"
    [ -h "$root/etc/localtime" ] && rm "$root/etc/localtime"
    eval "$chroot_eval ln -s \"/usr/share/zoneinfo/$SERVER_TIMEZONE\" /etc/localtime"
    errorcheck && exit 1
    echo "creating /etc/timezone"
    echo $SERVER_TIMEZONE > $root/etc/timezone
    errorcheck && exit 1

    #hostname
    echo "setting hostname file"
    [ -f "$root/etc/hostname" ] && rm "$root/etc/hostname"
    [ -h "$root/etc/hostname" ] && rm "$root/etc/hostname"
    echo $SERVER_HOSTNAME > "$root/etc/hostname"
    echo "setting hosts file"
    [ -f "$root/etc/hosts" ] && rm "$root/etc/hosts"
    [ -h "$root/etc/hosts" ] && rm "$root/etc/hosts"
    echo "127.0.0.1 localhost" > "$root/etc/hosts"
    echo "127.0.0.1 $SERVER_FQDN $SERVER_HOSTNAME" >> "$root/etc/hosts"

    #networking
    echo "setting up networking"
    nets=$(ls /sys/class/net | sed 's/ /\n/' | grep -v lo)
    [ "$(ls -A "$root/etc/systemd/network")" ] && \
        rm -r "$root/etc/systemd/network/"*
    if [ $(howmany $nets) -eq 1 ]; then
        echo "[Match]" > "$root/etc/systemd/network/$nets.network"
        echo "Name=$nets" >> "$root/etc/systemd/network/$nets.network"
        echo "[Network]" >> "$root/etc/systemd/network/$nets.network"
        echo "DHCP=yes" >> "$root/etc/systemd/network/$nets.network"
        echo "IPv6AcceptRA=no" >> "$root/etc/systemd/network/$nets.network"
        echo "LinkLocalAddressing=ipv4" >> "$root/etc/systemd/network/$nets.network"
    fi
    if [ $(howmany $nets) -gt 1 ]; then
        for net in $nets; do
            echo "[Match]" > "$root/etc/systemd/network/$net.network"
            echo "Name=$net" >> "$root/etc/systemd/network/$net.network"
            echo "[Network]" >> "$root/etc/systemd/network/$net.network"
            echo "Bond=lacp0" >> "$root/etc/systemd/network/$net.network"
        done

        echo "[Match]" > "$root/etc/systemd/network/lacp0.network"
        echo "Name=lacp0" >> "$root/etc/systemd/network/lacp0.network"
        echo "[Network]" >> "$root/etc/systemd/network/lacp0.network"
        echo "DHCP=yes" >> "$root/etc/systemd/network/lacp0.network"
        echo "IPv6AcceptRA=no" >> "$root/etc/systemd/network/lacp0.network"
        echo "LinkLocalAddressing=ipv4" >> "$root/etc/systemd/network/lacp0.network"
        echo "BindCarrier=$(echo $nets | sed 's/\n/ /')" >> "$root/etc/systemd/network/lacp0.network"

        echo "[NetDev]" > "$root/etc/systemd/network/lacp0.netdev"
        echo "Name=lacp0" >> "$root/etc/systemd/network/lacp0.netdev"
        echo "Kind=bond" >> "$root/etc/systemd/network/lacp0.netdev"
        echo "[Bond]" >> "$root/etc/systemd/network/lacp0.netdev"
        echo "Mode=802.3ad" >> "$root/etc/systemd/network/lacp0.netdev"
        echo "LACPTransmitRate=fast" >> "$root/etc/systemd/network/lacp0.netdev"
        echo "MIIMonitorSec=1s" >> "$root/etc/systemd/network/lacp0.netdev"
        echo "UpDelaySec=2s" >> "$root/etc/systemd/network/lacp0.netdev"
        echo "DownDelaySec=8s" >> "$root/etc/systemd/network/lacp0.netdev"
    fi

    echo "net.ipv6.conf.all.disable_ipv6 = 1" > "$root/etc/sysctl.d/10-disable-ipv6.conf"
    echo "net.ipv6.conf.default.disable_ipv6 = 1" >> "$root/etc/sysctl.d/10-disable-ipv6.conf"
    echo "net.ipv6.conf.lo.disable_ipv6 = 1" >> "$root/etc/sysctl.d/10-disable-ipv6.conf"

    eval "$chroot_eval systemctl enable systemd-networkd"

    #apt
    echo "setting up system package management"
    [ -f "$root/etc/apt/sources.list" ] && rm "$root/etc/apt/sources.list"
    touch "$root/etc/apt/sources.list"
    [ "$(ls -A "$root/etc/apt/sources.list.d")" ] && \
        rm "$root/etc/apt/sources.list.d/"*

    echo "deb [arch=amd64] $SERVER_DIST_URL $SERVER_DIST_RELEASE main universe" \
        >>  "$root/etc/apt/sources.list.d/$SERVER_DIST.$SERVER_DIST_RELEASE.list"

    echo "deb [arch=amd64] $SERVER_DIST_URL $SERVER_DIST_RELEASE-updates main universe" \
        >>  "$root/etc/apt/sources.list.d/$SERVER_DIST.$SERVER_DIST_RELEASE.updates.list"

    echo "deb [arch=amd64] $SERVER_DIST_URL $SERVER_DIST_RELEASE-security main universe" \
        >>  "$root/etc/apt/sources.list.d/$SERVER_DIST.$SERVER_DIST_RELEASE.security.list"

    eval "$chroot_eval apt-get update -qq"
    errorcheck && echoerr "error during apt-get update" && return 1
    eval "$chroot_eval apt-get upgrade -qq --no-install-recommends"
    errorcheck && echoerr "error during apt-get upgrade" && return 1
    eval "$chroot_eval apt-get dist-upgrade -qq --no-install-recommends"
    errorcheck && echoerr "error during apt-get dist-upgrade" && return 1

    eval "$chroot_eval apt-get install -qq --no-install-recommends \
        ubuntu-minimal \
        ubuntu-standard \
        linux-image-generic \
        zfs-initramfs \
        grub-efi-amd64 \
    "
    errorcheck && echoerr "error during apt-get install" && return 1

    #syslog
    echo "setting syslog to remote host $SYSLOG_ADDRESS:$SYSLOG_PORT"
    rm "$root/etc/rsyslog.d/"*
    echo "*.* @$SYSLOG_ADDRESS:$SYSLOG_PORT" > "$root/etc/rsyslog.d/50-default.conf"

    #efi
    echo "formating efi partition"

    sed -i 's/GRUB_CMDLINE_LINUX_DEFAULT="quiet splash"/GRUB_CMDLINE_LINUX_DEFAULT=""/' "$root/etc/default/grub"

    disk_num=1
    for boot_disk in $boot_disks
    do
        mkfs.fat -n EFI -F32 ${boot_disk}1
        errorcheck && echoerr "error foratting efi on $boot_disk" && return 1
        sleep 1s
        echo "setting up system for efi"
        [ ! -d "$root/boot/efi" ] && mkdir -p "$root/boot/efi"
        eval "$chroot_eval mount $(get_disk_link ${boot_disk}1 partuuid) /boot/efi"
        errorcheck && echoerr "error mounting efi on $boot_disk" && return 1

        echo "updating initramfs"
        eval "$chroot_eval update-initramfs -u -k all"
        errorcheck && echoerr "error updating initramfs on $boot_disk" && return 1
        echo "updating grub config"
        eval "$chroot_eval update-grub"
        errorcheck && echoerr "error updating grub on $boot_disk" && return 1
        echo "installing efi grub"
        eval "$chroot_eval grub-install \
            --target=x86_64-efi \
            --efi-directory=/boot/efi \
            --bootloader-id=$SERVER_DIST-$SERVER_DIST_RELEASE-$disk_num \
            --recheck \
            --no-floppy"
        errorcheck && echoerr "error installing grub on $boot_disk" && return 1
        sleep 1s
        eval "$chroot_eval umount /boot/efi"
        disk_num=$((disk_num+1))
    done
    echo "efi grub setup complete"

    #users
    groupadd -R "$root" -g $ADMIN_GROUP_ID $ADMIN_USERNAME
    errorcheck && return 1
    groupadd -R "$root" -g $DOCKER_PGID doc
    errorcheck && return 1
    useradd -R "$root" -m -u $ADMIN_USER_ID -g $ADMIN_USERNAME \
        -G plugdev,sudo,doc -s /bin/bash $ADMIN_USERNAME
    errorcheck && return 1
    useradd -R "$root" -r -u $DOCKER_PUID -g doc -s /sbin/nologin doc
    errorcheck && return 1
    echo "$ADMIN_USERNAME:$admin_password" | chpasswd -R "$root"
    errorcheck && return 1

    #server update service
    [ ! -e "$root/etc/systemd/system/server-update.service" ] && \
        eval "$chroot_eval ln -s /opt/server/systemd/system/server-update.service /etc/systemd/system/server-update.service"
    [ ! -h "$root/etc/systemd/system/server-update.service" ] && \
        rm -r "$root/etc/systemd/system/server-update.service" && \
        eval "$chroot_eval ln -s /opt/server/systemd/system/server-update.service /etc/systemd/system/server-update.service"

    [ ! -e "$root/etc/systemd/system/server-update.timer" ] && \
        eval "$chroot_eval ln -s /opt/server/systemd/system/server-update.timer /etc/systemd/system/server-update.timer"
    [ ! -h "$root/etc/systemd/system/server-update.timer" ] && \
        rm -r "$root/etc/systemd/system/server-update.timer" && \
        eval "$chroot_eval ln -s /opt/server/systemd/system/server-update.timer /etc/systemd/system/server-update.timer"

    eval "$chroot_eval systemctl enable server-update.timer"

    return 0
}

server_update() {

    echo "running binary updates (apt)"
    #binary updates
    apt-get update -qq
    errorcheck && echoerr "error during apt-get update" && return 1
    apt-get upgrade -qq --no-install-recommends
    errorcheck && echoerr "error during apt-get upgrade" && return 1
    apt-get dist-upgrade -qq --no-install-recommends
    errorcheck && echoerr "error during apt-get dist-upgrade" && return 1
    apt-get install -qq --no-install-recommends git
    errorcheck && echoerr "error installing git" && return 1

    get_server_code

    local patch_return=0
    echo "kicking off patches"
    for patch in $(ls "$SERVER_INSTALL/patches")
    do
        execute_patch "$patch"
        local ret=$?
        if [ "$ret" -ne 0 ]
        then
            echo "error kicking off patch $patch"
            local patch_return=$((patch_return+1))
        fi
    done

    echo "waiting for patches to complete"
    for patch in $(ls "$SERVER_INSTALL/patches")
    do
        wait_for_patch "$patch"
        local ret=$?
        if [ "$ret" -ne 0 ]
        then
            echo "error during patch $patch"
            local patch_return=$((patch_return+1))
        fi
    done
    [ "$patch_return" -ne 0 ] && return 1

    echo "server updates complete"
    return 0
}

get_server_code() {
    echo "getting latest server code from git to $SERVER_INSTALL"
    if [ ! -d "$root$SERVER_INSTALL" ]
    then
        git clone "$SERVER_GIT_LOCATION" "$root$SERVER_INSTALL"
        errorcheck && echoerr "failed to clone from git" && return 1
    fi
    pushd "$root$SERVER_INSTALL" >/dev/null
    git rev-parse --git-dir > /dev/null 2>&1
    errorcheck && popd >/dev/null && echoerr "directory not a git repo" && return 1
    git remote update >/dev/null
    errorcheck && popd >/dev/null && echoerr "failed to update git repo" && return 1
    local local_rev=$(git rev-parse master)
    local server_rev=$(git rev-parse origin/master)
    if [ "$local_rev" != "$server_rev" ]
    then
        git reset --hard origin/master >dev/null
        errorcheck && popd >/dev/null && echoerr "failed to reset git" && return 1
    fi
    popd >/dev/null

    echo "marking bin/patches executable"
    chmod +x "$root$SERVER_INSTALL/bin/"*
    chmod +x "$root$SERVER_INSTALL/patches/"*
}

wait_for_patch() {
    local patch=${1##*/}
    local pid=$(get_patch_pid "$patch")
    [ "x$pid" == "x" ] && echo "patch $patch isn't running..." && return 0
    echo "waiting for patch $patch on pid $pid"
    tail --pid=$pid -f "/var/log/server/patches/$patch.log"
    while kill -0 "$pid" >/dev/nul 2>&1
    do
        sleep 0.5s
    done
    clear_patch_pid "$patch"
    errorcheck && echoerr "failed to clear pid $pid for patch $patch" && return 1
    get_status "$patch"
    errorcheck && \
        echoerr "patch failure: check log for $patch patch" && \
        return 1
    echo "patch complete: $patch"
    return 0
}

wait_for_required_patch() {
    local patch=${1##*/}
    local pid=$(get_patch_pid "$patch")
    [ "x$pid" == "x" ] && echo "patch $patch isn't running..." && return 0
    echo "waiting for patch $patch on pid $pid"
    while kill -0 "$pid" >/dev/nul 2>&1
    do
        sleep 0.5s
    done
    get_status "$patch"
    errorcheck && \
        echoerr "required patch failure: check log for $patch patch" && \
        return 1
    echo "required patch complete: $patch"
    return 0
}

get_log_name() {
    local patch=${1##*/}
    [ ! -d "/var/log/server/patches" ] && mkdir -p "/var/log/server/patches"
    [ ! -f "/var/log/server/patches/$patch.log" ] && \
        echo "/var/log/server/patches/$patch.log" && return 0
    local ln=1
    while [ -f "/var/log/server/patches/$patch.$ln.log" ]
    do
        ln=$((ln+1))
    done
    mv "/var/log/server/patches/$patch.log" "/var/log/server/patches/$patch.$ln.log"
    echo "/var/log/server/patches/$patch.log"
    return 0
}

execute_patch() {
    local patch=${1##*/}
    local pid=$(get_patch_pid "$patch")
    [ "x$pid" != "x" ] && \
        echo "patch $patch already running on pid $pid - skipping" && \
        return 0
    {
        "$SERVER_INSTALL/patches/$patch" >"$(get_log_name "$patch")" 2>&1
        local ret=$?
        set_status "$patch" "$ret"
    } & >/dev/null 2>&1
    set_patch_pid "$patch" "$!"
    errorcheck && echoerr "failed to set pid for patch $patch" && return 1
    echo "started $patch patch on pid $(get_patch_pid "$patch")"
    return 0
}

set_status() {
    local patch=${1##*/}
    [ ! -d "/etc/server/patches" ] && mkdir -p "/etc/server/patches"
    echo "$2" > "/etc/server/patches/$patch.status"
}

get_status() {
    local patch=${1##*/}
    [ ! -f "/etc/server/patches/$patch.status" ] && return 0
    return $(cat "/etc/server/patches/$patch.status")
}

patch_requires() {
    local patch=${1##*/}
    local version=$2
    local pid=$(get_patch_pid "$patch")
    if [ "x$pid" != "x" ]
    then
        echo "required patch $patch current running on pid $pid - waiting"
    else
        get_status "$patch"
        errorcheck && echoerr "required patch $patch failed" && return 1
        check_version "$version" "$patch" && echo "required patch $patch already on latest version." && return 0
        echo "required patch $patch does not meet version $version - executing"
        execute_patch "$patch"
        errorcheck && echoerr "starting patch $patch might have failed"
    fi
    wait_for_required_patch "$patch"
    errorcheck && echo "required patch $patch failed" && return 1 || return 0
}

get_patch_pid() {
    local patch=${1##*/}
    [ -f "/var/run/server/patches/$patch" ] && \
        echo $(cat "/var/run/server/patches/$patch") && \
        return 0 || return 1
}

set_patch_pid() {
    local patch=${1##*/}
    [ ! -d "/var/run/server/patches" ] && mkdir -p "/var/run/server/patches"
    echo "$2" > "/var/run/server/patches/$patch"
    return 0
}

clear_patch_pid() {
    local patch=${1##*/}
    [ -f "/var/run/server/patches/$patch" ] && rm "/var/run/server/patches/$patch" && return 0
    echoerr "no pid for $patch patch." && return 1
}

#checks version of patch files
#   returns 1 if the patch should run
#   meaning either the version is unknown or less than or equal to the last run
check_version() {
    local patch=${2##*/}
    local version=$1
    [ "x$version" == "x0" ] && return 0
    [ -f "/etc/server/patches/$patch" ] && \
        local local_version=$(cat "/etc/server/patches/$patch")
    [ "x$local_version" == "x" ] && return 1
    vers_test "$version" "-gt" "$local_version" && return 1 || return 0
}

set_version() {
    local patch=${2##*/}
    [ ! -d "/etc/server/patches" ] && mkdir -p "/etc/server/patches"
    echo "$1" > "/etc/server/patches/$patch"
    return 0
}

set_server_setting() {
    local setting=$1
    [ ! -d "$root" ] && local root=
    [ ! -d "$root/etc/server/settings" ] && mkdir -p "$root/etc/server/settings"
    echo "$2" > "$root/etc/server/settings/$setting"
    chmod 600 "$root/etc/server/settings/$setting"
    return 0
}

get_server_setting() {
    local setting=$1
    [ -f "/etc/server/settings/$setting" ] && echo "$(cat /etc/server/settings/$setting)" && return 0
    echoerr "no server setting named $setting" && return 1
}

vercomp() {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

vers_test() {
    vercomp $1 $3
    case $? in
        0) op='-eq';;
        1) op='-gt';;
        2) op='-lt';;
    esac
    if [[ $op != $2 ]]
    then
        return 1
    else
        return 0
    fi
}

#requires variables:
#   boot_disks
#       must be set to dev disk ex: "/dev/sda"
zfs_boot_setup() {
    local boot_disk_list=
    echo "clearing all boot disks"
    for boot_disk in $boot_disks
    do
        echo "clearing boot disk $boot_disk"
        clear_disk $boot_disk
        echo "partitioning boot disk $boot_disk"
        sleep 1s
        parted -s $boot_disk "mktable gpt"
        errorcheck && return 1
        parted -s $boot_disk "mkpart primary 1mb 513mb"
        errorcheck && return 1
        parted -s $boot_disk "mkpart primary 513mb -1"
        errorcheck && return 1
        parted -s $boot_disk "name 1 efi"
        errorcheck && return 1
        parted -s $boot_disk "set 1 boot on"
        errorcheck && return 1
        parted -s $boot_disk "name 2 system"
        errorcheck && return 1
        parted -s $boot_disk "set 2 bios_grub on"
        errorcheck && return 1
        sleep 1s
        local boot_disk_list="${boot_disk_list:-} $(get_disk_link ${boot_disk}2)"
    done
    echo "creating zfs boot pool"
    sleep 1s

    raid_type="mirror"
    [ $(howmany "$boot_disk_list") -eq 1 ] && raid_type=""

    eval "zpool create -f \
        -o ashift=12 \
        -O atime=off \
        -O compression=lz4 \
        -O canmount=off \
        -m none \
        -R \"$root\" \
        $ROOT_POOL $raid_type $boot_disk_list"
    errorcheck && echoerr "error creating root pool" && return 1
    echo "setting up boot datasets"
    zfs create -o canmount=off -o mountpoint=none $ROOT_POOL/ROOT
    errorcheck && echoerr "error creating root pool dataset" && return 1
    zfs create -o canmount=off -o mountpoint=none $ROOT_POOL/ROOT/$SERVER_DIST
    errorcheck && echoerr "error creating root pool dataset" && return 1
    zfs create -o canmount=noauto -o mountpoint="/" $ROOT_POOL/ROOT/$SERVER_DIST/$SERVER_DIST_RELEASE
    errorcheck && echoerr "error creating root pool dataset" && return 1

    zfs mount $ROOT_POOL/ROOT/$SERVER_DIST/$SERVER_DIST_RELEASE
    errorcheck && echoerr "error mounting root pool" && return 1

    echo "boot disk setup complete"
    return 0
}

kill_children() {
    for child in $(ps -o pid,ppid -ax | awk "{ if ( \$2 == $1 ) { print \$1 }}")
    do
        kill_children "$child"
    done
    kill -0 $1 >/dev/null 2>&1 && kill $1
    return 0
}

echoerr() {
    cat <<< "$@" 1>&2
    return 0
}

errorcheck() {
    [ $? -ne 0 ] && return 0
    return 1
}

#count number of arguments
howmany() {
    case $- in
        *f* )
            set -- $1
        ;;
        * )
            set -f
            set -- $1
            set +f
        ;;
    esac
    echo $#
}

#gets a single /dev/disk/by-
#link based on the dev provided
#
#parameters:
#   1 - base dev ex: "/dev/sda"
#   2 - (optional) link type ex: "uuid"
#       this is anything under /dev/disk/by-
#       that would show up under DEVLINKS in udevadm
get_disk_link() {
    local filter="by-"${2:-"id"}
    udevadm info -q all $1 | grep DEVLINKS | sed 's/ /\n/g' | grep /dev/ | sed 's/DEVLINKS=//' | grep $filter | sort | head -n1
    errorcheck && return 1
    return 0
}

#gets a single /dev/sdx
#link based on the /dev/disk/by-xx link provided
#
#parameters:
#   1 - base dev link ex: "/dev/disk/by-id/scsi-12315162363"
get_disk() {
    udevadm info -q all $1 | grep DEVNAME | sed 's/ /\n/g' | grep /dev/  | sed 's/DEVNAME=//'
    errorcheck && return 1
    return 0
}

#removes all mounts/swaps/zpools from disk. anything that would prevent repartitioning.
#
#variables
#   1=dev disk ex: "/dev/sda"
clear_disk() {
    local disk=$1
    for swap in $(cat /proc/swaps | awk -v d=$disk '$1 ~ d {print $1}'); do swapoff $swap; done
    for mountpoint in $(mount | awk -v d=$disk '$1 ~ d {print $1}' | sort | uniq); do umount -lAR $mountpoint; done
    for pool in $(zpool list -H | awk '{print $1}'); do
        [ -n "$(zpool status -P $pool | grep $(get_disk_link $disk))" ] && zpool destroy $pool
    done
    for pool in $(zpool list -H | awk '{print $1}'); do
        [ -n "$(zpool status -P $pool | grep $disk)" ] && zpool destroy $pool;
    done
    which mdadm >/dev/null && mdadm --zero-superblock --force $disk
    sgdisk --zap $disk >/dev/null
    return 0
}

#filters quotes out of whatever is passed in
#useful for whiptail values with quotes in them
filter_quotes() {
    echo "$1" | sed 's/"//g'
}

#this is used to pass to whiptail to print available disks
#   note: disk with root "/" mounted is filtered automatically (if it is a disk)
#optional variables:
#   anything passed will act as a filter for output
#   ex: whiptail_disks /dev/sda /dev/sdb
#   this will print all available disks EXCEPT sda and adb.
whiptail_disks() {
    local whiptail_filter=$@
    local whiptail_output=$(lsblk -npr -o KNAME,MODEL,SIZE,TYPE,RO | \
    awk '$5 == 0 && $4 == "disk" {print $1 FS "\42"$2" ("$3")\42 OFF"}' | sed 's/\\x20/ /g')
    for f in $whiptail_filter; do
        local whiptail_output=$(echo "$whiptail_output" | grep -v $f)
    done
    local root_mount_name=$(mount | awk '/\ \/\ / {print $1}')
    echo "$whiptail_output" | grep -v ${root_mount_name##/dev/}
}
